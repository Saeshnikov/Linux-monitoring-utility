#ifndef BPFTRACE_HAVE_BTF
#include <linux/sched.h>
#include <linux/limits.h>
#endif

//struct MyStruct {
//  s64 p[1000];
//}

BEGIN
{
	printf("Tracing file system syscalls... Hit Ctrl-C to end.\n");
	printf("%-16s %-16s %4s %-60s %-4s %-4s\n", "COMM", "COMMTASK", "FD", "PATH", "R", "W");
}

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat
/@filename[tid]/
{
	$ret = args.ret;
	@fd[tid] = $ret >= 0 ? $ret : -1;
}

tracepoint:syscalls:sys_exit_write,
tracepoint:syscalls:sys_exit_writev,
tracepoint:syscalls:sys_exit_pwritev
/@fd[tid]/
{
	$task = (struct task_struct *)curtask;

    $ret = args.ret;
	$nbyte = $ret >= 0 ? $ret : -1;
	$nothing = "-";

	// Двумя разными способами пробовали создавать массив, чтобы выводить путь в правильном порядке, но безуспешно

	// 1. через струткуру (ошибка, не дает ей ничего присвоить)
	//$full_path_comm = (struct MyStruct *)arg0;
	//$full_path_comm->p[0] = comm;

	// 2. следующим образом: (ошибка, ругается на цикл по данному массиву (строки 66 - 68))
	//@full_path_comm[comm] = "";

	$part_path = $task->mm->exe_file->f_path.dentry->d_parent;
	$i = 1;
	printf("%s",comm);
	while ($i != 1000) {

		//@full_path_comm[comm] = str($part_path->d_name.name);

		printf("/%s", str($part_path->d_name.name));
		$part_path = $part_path->d_parent;
		if ((uint64)$part_path->d_inode->i_ino == 256) {
			printf("/%s", str($part_path->d_name.name));
			break;
		}
		$i = $i + 1;
	}

	//for ($kv : @full_path_comm) {
	//	print($kv.1); // value
	//}

	printf(" %d %s %s %d\n", @fd[tid], str(@filename[tid]), $nothing, $ret);

    delete(@filename[tid]);
	delete(@fd[tid]);
	//delete(@full_path_comm)

}

tracepoint:syscalls:sys_exit_read,
tracepoint:syscalls:sys_exit_readv,
tracepoint:syscalls:sys_exit_preadv
/@fd[tid]/
{

	$task = (struct task_struct *)curtask;

    $ret = args.ret;
	$nbyte = $ret >= 0 ? $ret : -1;
	$nothing = "-";

	$part_path = $task->mm->exe_file->f_path.dentry->d_parent;
	$i = 1;
	printf("%s",comm);
	while ($i != 1000) {
		printf("/%s", str($part_path->d_name.name));
		$part_path = $part_path->d_parent;
		if ((uint64)$part_path->d_inode->i_ino == 256) {
			printf("/%s", str($part_path->d_name.name));
			break;
		}
		$i = $i + 1;
	}

	printf(" %d %s %d %s\n", @fd[tid], str(@filename[tid]), $ret, $nothing);

    delete(@filename[tid]);
	delete(@fd[tid]);
}



END
{
	clear(@filename);
	clear(@fd);
	//clear(@$full_path_comm);
}
