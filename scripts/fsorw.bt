#ifndef BPFTRACE_HAVE_BTF
#include <linux/sched.h>
#include <linux/limits.h>
#endif

BEGIN
{
	printf("Tracing file system syscalls... Hit Ctrl-C to end.\n");
	printf("%-16s %4s %-60s %-4s %-4s\n", "COMM", "FD", "PATH", "R", "W");
}

//SYMLINK
tracepoint:syscalls:sys_enter_readlink
{
	@oldname[tid] = args.path;
}
tracepoint:syscalls:sys_enter_readlinkat
{
	@oldname[tid] = args.pathname;
}
tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat,
tracepoint:syscalls:sys_enter_execve,
tracepoint:syscalls:sys_enter_execveat,
tracepoint:syscalls:sys_enter_openat2,
tracepoint:syscalls:sys_enter_open_tree,
tracepoint:syscalls:sys_enter_statx
/@oldname[tid]/
{
	@filename[tid] = args.filename;
}
tracepoint:syscalls:sys_enter_fspick
/@oldname[tid]/
{
	@filename[tid] = args.path;
}
tracepoint:syscalls:sys_enter_name_to_handle_at
/@oldname[tid]/
{
	@name[tid] = args.name;
}

//ALL
tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat,
tracepoint:syscalls:sys_enter_execve,
tracepoint:syscalls:sys_enter_execveat,
tracepoint:syscalls:sys_enter_openat2,
tracepoint:syscalls:sys_enter_open_tree,
tracepoint:syscalls:sys_enter_statx
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_enter_fspick
{
	@filename[tid] = args.path;
}

tracepoint:syscalls:sys_enter_name_to_handle_at
{
	@name[tid] = args.name;
}
tracepoint:syscalls:sys_exit_name_to_handle_at
/@name[tid]/
{
	$ret = args.ret;
	@fdHandle[tid] = $ret >= 0 ? $ret : -1;
}
tracepoint:syscalls:sys_enter_open_by_handle_at
/@fdHandle[tid]/
{
	@filename[tid] = @name[tid];
	delete(@fdHandle[tid]);
}

tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat,
tracepoint:syscalls:sys_exit_execve,
tracepoint:syscalls:sys_exit_execveat,
tracepoint:syscalls:sys_exit_openat2,
tracepoint:syscalls:sys_exit_open_tree,
tracepoint:syscalls:sys_exit_statx,
tracepoint:syscalls:sys_exit_fspick,
tracepoint:syscalls:sys_exit_open_by_handle_at
/@filename[tid]/
{
	$ret = args.ret;
	@fd[tid] = $ret >= 0 ? $ret : -1;
}

tracepoint:syscalls:sys_exit_write,
tracepoint:syscalls:sys_exit_writev,
tracepoint:syscalls:sys_exit_pwritev
/@fd[tid]/
{
    $ret = args.ret;
	$nbyte = $ret >= 0 ? $ret : -1;
	$nothing = "-";

	$task = (struct task_struct *)curtask;
	$part_path = $task->mm->exe_file->f_path.dentry->d_parent;
	$i = 0;
	@full_path_comm[$i] = $part_path->d_name.name;
	$i = 1;

	while ($i != 3000) {
		$part_path = $part_path->d_parent;
		@full_path_comm[$i] = $part_path->d_name.name;
		if ((uint64)$part_path->d_inode->i_ino == 256) {
			break;
		}
		$i = $i + 1;
	}
	printf("\n/");
	while ($i != -1) {
		$str_ = @full_path_comm[$i];
		printf("%s/", str($str_));
		$i = $i - 1;
	}
	printf("%s ",comm);
	printf("%d %s %s %d", @fd[tid], str(@filename[tid]), $nothing, $ret);

    delete(@filename[tid]);
	delete(@fd[tid]);
}


tracepoint:syscalls:sys_exit_read,
tracepoint:syscalls:sys_exit_readv,
tracepoint:syscalls:sys_exit_preadv
/@fd[tid]/
{
    $ret = args.ret;
	$nbyte = $ret >= 0 ? $ret : -1;
	$nothing = "-";

	$task = (struct task_struct *)curtask;
	$part_path = $task->mm->exe_file->f_path.dentry->d_parent;
	$i = 0;
	@full_path_comm[$i] = $part_path->d_name.name;
	$i = 1;

	while ($i != 3000) {
		$part_path = $part_path->d_parent;
		@full_path_comm[$i] = $part_path->d_name.name;
		if ((uint64)$part_path->d_inode->i_ino == 256) {
			break;
		}
		$i = $i + 1;
	}
	printf("\n/");
	while ($i != -1) {
		$str_ = @full_path_comm[$i];
		printf("%s/", str($str_));
		$i = $i - 1;
	}
	printf("%s ",comm);
	printf("%d %s %d %s", @fd[tid], str(@filename[tid]), $ret, $nothing);

    delete(@filename[tid]);
	delete(@fd[tid]);
}


END
{
	clear(@filename);
	clear(@fd);
	clear(@full_path_comm);
	clear(@name);
	clear(@fdHandle);
	clear(@oldname);
}
