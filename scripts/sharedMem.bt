#ifndef BPFTRACE_HAVE_BTF
#include <linux/sched.h>
#include <linux/limits.h>
#endif

BEGIN
{
	printf("Shared memory... Hit Ctrl-C to end.\n");
	printf("%s %s %s %s\n", "COMM", "KEY", "SHMID", "TYPE");
}

tracepoint:syscalls:sys_enter_shmget
{
	@shmkey[tid] = args.key;
}

tracepoint:syscalls:sys_exit_shmget
/@shmkey[tid]/
{
	@shmid[tid] = args.ret;
}

tracepoint:syscalls:sys_exit_shmat
/@shmid[tid]/
{
	$task = (struct task_struct *)curtask;
	$part_path = $task->mm->exe_file->f_path.dentry->d_parent;
	$i = 0;
	@full_path_comm[$i] = $part_path->d_name.name;
	$i = 1;

	while ($i != 1000) {
		$part_path = $part_path->d_parent;
		@full_path_comm[$i] = $part_path->d_name.name;
		if ((uint64)$part_path->d_inode->i_ino == 256) {
			break;
		}
		$i = $i + 1;
	}
	printf("/");
	while ($i != -1) {
		$str_ = @full_path_comm[$i];
		printf("%s/", str($str_));
		$i = $i - 1;
	}
	printf("%s",comm);

	$type = "system v";
	printf(" %x %d %s\n", @shmkey[tid], @shmid[tid], $type);
}


kprobe:shm_open
{
	@name[tid] = arg0;
}

kretprobe:shm_open
/@name[tid]/
{
	@posshmid[tid] = retval;
}

tracepoint:syscalls:sys_enter_mmap
/@posshmid[tid]/
{
	$task = (struct task_struct *)curtask;
	$part_path = $task->mm->exe_file->f_path.dentry->d_parent;
	$i = 0;
	@full_path_comm[$i] = $part_path->d_name.name;
	$i = 1;

	while ($i != 1000) {
		$part_path = $part_path->d_parent;
		@full_path_comm[$i] = $part_path->d_name.name;
		if ((uint64)$part_path->d_inode->i_ino == 256) {
			break;
		}
		$i = $i + 1;
	}
	printf("/");
	while ($i != -1) {
		$str_ = @full_path_comm[$i];
		printf("%s/", str($str_));
		$i = $i - 1;
	}
	printf("%s",comm);

	$type = "posix";
	printf(" %x %d %s\n", @name[tid], @posshmid[tid], $type);
	delete(@name[tid]);
	delete(@posshmid[tid]);
}


END
{
        clear(@shmkey);
	clear(@shmid);
	clear(@name);
	clear(@posshmid);
	clear(@full_path_comm);
}
